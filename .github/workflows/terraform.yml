name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Terraform:
    name: "Terraform"
    runs-on: self-hosted
    permissions:
      pull-requests: write
   #  defaults:
   #    run:
   #      working-directory: terraform-google-gcs
    strategy:
      fail-fast: false
      matrix:
        path:
          - uat
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_hostname: 'terraform.adarshasuvarna.in'
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: true

      - name : Terraform Format
        id: fmt   
        run: |
          cd terraform/${{ matrix.path }}
          terraform fmt -check -diff -recursive

      - name: Terraform Init
        id: init
        run: |
          cd terraform/${{ matrix.path }}
          terraform init -input=false

      - name: Terraform Validate  
        id: validate
        run: |
          cd terraform/${{ matrix.path }}
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          cd terraform/${{ matrix.path }}
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan

      - name: Reformat Plan
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

     #  - name: Update Pull Request
     #    uses: actions/github-script@v6
     #    if: github.event_name == 'pull_request'
     #    env:
     #      PLAN: "${{ steps.plan.outputs.stdout }}"
     #    with:
     #      github-token: ${{ secrets.GITHUB_TOKEN }}
     #      script: |
     #        const output = `#### Terraform Format and Style\`${{ steps.fmt.outcome }}\`
     #        #### Terraform Initialization\`${{ steps.init.outcome }}\`
     #        #### Terraform Validation\`${{ steps.validate.outcome }}\`
     #        <details><summary>Validation Output</summary>

     #        \`\`\`\n
     #        ${{ steps.validate.outputs.stdout }}
     #        \`\`\`

     #        </details>
            
     #        #### Terraform Plan\`${{ steps.plan.outcome }}\`

     #        <details><summary>Show Plan</summary>

     #        \`\`\`\n
     #        ${process.env.PLAN}
     #        \`\`\`

     #        </details>

     #        *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

     #        github.rest.issues.createComment({
     #          issue_number: context.issue.number,
     #          owner: context.repo.owner,
     #          repo: context.repo.repo,
     #          body: output
     #        })

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## ${{ matrix.path }} plan
            ```diff
            ${{ env.PLAN }}
            ```
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Inform on PR that Apply is Running
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Running terraform apply***
            Results will display here momentarily...


      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          cd terraform/${{ matrix.path }}
          terraform apply \
            -input=false \
            -no-color \
            tfplan

      - name: Post Plan and Apply to GitHub PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Applying **${{ matrix.path }}**:

            ```diff
            ${{ env.PLAN }}
            ```

            ```
            ${{ steps.apply.outputs.stdout }}
            ```

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Plan failed for **${{ matrix.path }}**:

            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Apply failed for **${{ matrix.path }}**:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```